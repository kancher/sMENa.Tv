import { NextResponse } from 'next/server';

const YANDEX_OAUTH_TOKEN = process.env.YANDEX_OAUTH_TOKEN;
const COUNTER_ID = process.env.YANDEX_COUNTER_ID;

export async function GET() {
  try {
    if (!YANDEX_OAUTH_TOKEN || !COUNTER_ID) {
      throw new Error('Yandex OAuth token not configured');
    }

    console.log('üîê Fetching real Yandex Metrika data...');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const response = await fetch(
      `https://api-metrica.yandex.net/stat/v1/data?ids=${COUNTER_ID}&metrics=ym:s:visits,ym:s:users,ym:s:pageviews&date1=today`,
      {
        headers: {
          'Authorization': `OAuth ${YANDEX_OAUTH_TOKEN}`,
        },
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Yandex API error:', response.status, errorText);
      throw new Error(`Yandex API error: ${response.status}`);
    }

    const data = await response.json();
    console.log('üìä Real Yandex API data:', data);

    const metrics = data.data[0]?.metrics || [0, 0, 0];
    const totals = data.totals || [0, 0, 0];

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ
    const online = metrics[0] > 0 ? Math.min(Math.floor(metrics[0] / 10) + 1, 15) : 3;

    return NextResponse.json({
      success: true,
      todayVisitors: metrics[0] || 0,
      todayUsers: metrics[1] || 0,
      totalVisitors: totals[0] || metrics[0] || 0,
      uniqueVisitors: metrics[1] || 0,
      pageViews: metrics[2] || 0,
      online: online,
      lastUpdated: new Date().toISOString(),
      message: 'üéØ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏!'
    });

  } catch (error) {
    console.error('‚ùå Yandex API error:', error.message);
    
    // Fallback —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const now = new Date();
    return NextResponse.json({
      success: false,
      todayVisitors: 0,
      totalVisitors: 0, 
      uniqueVisitors: 0,
      pageViews: 0,
      online: 0,
      lastUpdated: now.toISOString(),
      message: 'üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ...'
    });
  }
}
