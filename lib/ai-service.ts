const AI_WORKER_URL = 'https://smena-ai-worker.smenatv.workers.dev';
const IMAGE_WORKER_URL = 'https://smena-image-worker.smenatv.workers.dev';
const TELEGRAM_LOGGER_URL = 'https://smena-telegram-logger.smenatv.workers.dev';

const CONFIG = {
  MAX_HISTORY_LENGTH: 6,
  MAX_MESSAGE_LENGTH: 500,
  FALLBACK_PROMPT: '–∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
};

export class AIService {
  static async getResponse(messages: { role: string; content: string }[], generateImage: boolean = false): Promise<string> {
    try {
      console.log(`üîÑ AI Service: ${generateImage ? 'Image' : 'Text'} mode`);

      const aiResponse = generateImage 
        ? await this.generateImage(messages)
        : await this.generateText(messages);

      this.logToTelegram(messages, aiResponse, generateImage).catch(error => 
        console.warn('‚ö†Ô∏è Telegram log failed:', error.message)
      );

      return aiResponse;

    } catch (error) {
      console.error('‚ùå AI Service failed:', error);
      return this.getFallbackResponse(messages, error);
    }
  }

  private static async generateText(messages: { role: string; content: string }[]): Promise<string> {
    console.log('üí¨ Sending chat request...');
    
    const filteredMessages = this.filterMessageHistory(messages);
    console.log('üìù Filtered messages:', filteredMessages.length);

    const response = await fetch(AI_WORKER_URL, {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({ messages: filteredMessages })
    });

    if (!response.ok) {
      throw new Error(`AI Worker error: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.error) {
      throw new Error(`AI Worker: ${data.error}`);
    }

    console.log('‚úÖ Chat response received');
    return data.reply;
  }

  private static async generateImage(messages: { role: string; content: string }[]): Promise<string> {
    const prompt = messages[messages.length - 1]?.content || CONFIG.FALLBACK_PROMPT;
    console.log('üé® Image generation prompt:', prompt);

    const response = await fetch(IMAGE_WORKER_URL, {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({
        prompt: prompt,
        width: 512,
        height: 512
      })
    });

    if (!response.ok) {
      throw new Error(`Image generation failed: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.error || 'Image generation failed');
    }

    console.log('‚úÖ Image generated successfully');
    return data.image;
  }

  private static filterMessageHistory(messages: { role: string; content: string }[]) {
    return messages
      .map(msg => ({
        ...msg,
        content: this.cleanMessageContent(msg.content)
      }))
      .filter(msg => msg.content.length < CONFIG.MAX_MESSAGE_LENGTH)
      .slice(-CONFIG.MAX_HISTORY_LENGTH);
  }

  private static cleanMessageContent(content: string): string {
    if (!content) return '';
    
    if (content.includes('base64') || content.includes('data:image')) {
      return '[–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]';
    }
    
    return content;
  }

  private static getFallbackResponse(messages: { role: string; content: string }[], error: any): string {
    const lastMessage = messages[messages.length - 1]?.content || '';
    
    if (lastMessage.includes('–Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å') || lastMessage.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')) {
      return '–û–π, —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏! üòÖ –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ? üé®';
    }
    
    if (lastMessage.includes('–ø–æ–ø—Ä–æ—Å–∏–ª') || lastMessage.includes('—á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–ª')) {
      return '–ü—Ä–æ—Å—Ç–∏, —è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–º–Ω—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! ü´£ –ù–æ –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ! ‚ú®';
    }

    return "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üõ†Ô∏è –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É! üí´";
  }

  private static async logToTelegram(messages: any[], aiReply: string, isImage: boolean = false) {
    try {
      console.log('üì± Sending to Telegram logger...', { isImage, replyLength: aiReply?.length });

      await fetch(TELEGRAM_LOGGER_URL, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          messages: messages.slice(-2),
          aiReply: aiReply,
          isImage: isImage
        })
      });

      console.log('‚úÖ Telegram log sent successfully');

    } catch (error) {
      console.warn('‚ö†Ô∏è Telegram log failed:', error.message);
    }
  }
}
