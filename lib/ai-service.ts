// lib/ai-service.ts

const AI_WORKER_URL = 'https://smena-ai-worker.smenatv.workers.dev';
const IMAGE_WORKER_URL = 'https://smena-image-worker.smenatv.workers.dev';
const TELEGRAM_LOGGER_URL = 'https://smena-telegram-logger.smenatv.workers.dev';

export class AIService {
  static async getResponse(messages: { role: string; content: string }[], generateImage: boolean = false): Promise<string> {
    try {
      let aiResponse: string;

      if (generateImage) {
        // –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        aiResponse = await this.generateImage(messages);
      } else {
        // –†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞
        aiResponse = await this.generateText(messages);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –≤ Telegram —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π Worker
      await this.logToTelegram(messages, aiResponse, generateImage);

      return aiResponse;

    } catch (error) {
      console.error('AI failed:', error);
      return "–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å! üõ†Ô∏è –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üí´";
    }
  }

  private static async generateText(messages: { role: string; content: string }[]): Promise<string> {
    const response = await fetch(AI_WORKER_URL, {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({ messages })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.error) {
      throw new Error(data.error);
    }

    return data.reply;
  }

  private static async generateImage(messages: { role: string; content: string }[]): Promise<string> {
    const lastMessage = messages[messages.length - 1]?.content || '–∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
    
    const response = await fetch(IMAGE_WORKER_URL, {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({
        prompt: lastMessage,
        width: 512,
        height: 512
      })
    });

    if (!response.ok) {
      throw new Error(`Image generation failed: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.error) {
      throw new Error(data.error);
    }

    return data.image; // Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  }

  private static async logToTelegram(messages: any[], aiReply: string, isImage: boolean = false) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram Logger Worker
      const logResponse = await fetch(TELEGRAM_LOGGER_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: messages,
          aiReply: aiReply,
          isImage: isImage
        })
      });

      if (!logResponse.ok) {
        console.error('Telegram logger response error');
      }

    } catch (error) {
      console.error('Telegram log failed:', error);
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    }
  }
}
