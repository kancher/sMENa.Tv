// lib/ai-service.ts

const AI_WORKER_URL = 'https://smena-ai-worker.smenatv.workers.dev';
const IMAGE_WORKER_URL = 'https://smena-image-worker.smenatv.workers.dev';
const TELEGRAM_LOGGER_URL = 'https://smena-telegram-logger.smenatv.workers.dev';

export class AIService {
  static async getResponse(messages: { role: string; content: string }[], generateImage: boolean = false): Promise<string> {
    try {
      console.log(`üîÑ AI Service: ${generateImage ? 'Image' : 'Text'} mode`);

      let aiResponse: string;

      if (generateImage) {
        aiResponse = await this.generateImage(messages);
      } else {
        aiResponse = await this.generateText(messages);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –≤ Telegram (–û–¢–ü–†–ê–í–õ–Ø–ï–ú –ö–ê–ö –†–ê–ù–¨–®–ï - –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò)
      this.logToTelegram(messages, aiResponse, generateImage).catch(console.error);

      return aiResponse;

    } catch (error) {
      console.error('‚ùå AI Service failed:', error);
      
      const lastMessage = messages[messages.length - 1]?.content || '';
      
      if (lastMessage.includes('–Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å') || lastMessage.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') || lastMessage.includes('–ø–æ–ø—Ä–æ—Å–∏–ª')) {
        return '–û–π, —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç —Å–±–æ–∏! üòÖ –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É? üé®';
      }
      
      return "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üõ†Ô∏è –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üí´";
    }
  }

  private static async generateText(messages: { role: string; content: string }[]): Promise<string> {
    console.log('üí¨ Sending chat request...');
    
    try {
      // üî• –§–ò–õ–¨–¢–†–£–ï–ú –ò–°–¢–û–†–ò–Æ –î–õ–Ø –ö–£–õ–ò (–±–µ–∑ base64)
      const filteredMessages = messages
        .map(msg => {
          const content = msg.content || '';
          // –ó–∞–º–µ–Ω—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É
          if (content.includes('base64') || content.includes('data:image')) {
            return {
              ...msg,
              content: '[–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]'
            };
          }
          return msg;
        })
        .filter(msg => (msg.content || '').length < 500)
        .slice(-6);

      console.log('üìù Filtered messages for Kulya:', filteredMessages.length);

      const response = await fetch(AI_WORKER_URL, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ messages: filteredMessages })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }

      console.log('‚úÖ Chat response received');
      return data.reply;

    } catch (error) {
      console.error('üí• generateText error:', error);
      throw error;
    }
  }

  private static async generateImage(messages: { role: string; content: string }[]): Promise<string> {
    const lastMessage = messages[messages.length - 1]?.content || '–∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
    
    console.log('üé® Image generation prompt:', lastMessage);

    try {
      const response = await fetch(IMAGE_WORKER_URL, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          prompt: lastMessage,
          width: 512,
          height: 512
        })
      });

      if (!response.ok) {
        throw new Error(`Image generation failed: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Image generation failed');
      }

      console.log('‚úÖ Image generated successfully');
      return data.image;

    } catch (error) {
      console.error('üí• generateImage error:', error);
      throw error;
    }
  }

  private static async logToTelegram(messages: any[], aiReply: string, isImage: boolean = false) {
    try {
      // üî• –í–û–ó–í–†–ê–©–ê–ï–ú –°–¢–ê–†–£–Æ –õ–û–ì–ò–ö–£ - –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í–°–Å –ö–ê–ö –ï–°–¢–¨ –í TELEGRAM
      // Telegram Logger —Å–∞–º —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      await fetch(TELEGRAM_LOGGER_URL, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          messages: messages,
          aiReply: aiReply, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (base64 –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
          isImage: isImage
        })
      });
    } catch (error) {
      console.error('Telegram log failed:', error);
    }
  }
}
