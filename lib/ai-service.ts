// lib/ai-service.ts
// üîß Telegram logging enabled

const AI_WORKER_URL = 'https://smena-ai-worker.smenatv.workers.dev';

// –û–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Environment Variables
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

export class AIService {
  static async getResponse(messages: { role: string; content: string }[]): Promise<string> {
    try {
      const response = await fetch(AI_WORKER_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: messages
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
      if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
        await this.logToTelegram(messages, data.reply);
      }

      return data.reply;

    } catch (error) {
      console.error('Real AI failed:', error);
      return "–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å! üõ†Ô∏è –ù–æ —è —É–∂–µ —á–∏–Ω—é! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–æ—á–∫—É! üí´";
    }
  }

  private static async logToTelegram(messages: any[], aiReply: string) {
    try {
      const lastUserMessage = messages[messages.length - 1]?.content || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è';
      const messageCount = messages.length;
      
      const truncatedUserMsg = lastUserMessage.length > 200 
        ? lastUserMessage.substring(0, 200) + '...' 
        : lastUserMessage;
      
      const truncatedAiReply = aiReply.length > 200 
        ? aiReply.substring(0, 200) + '...' 
        : aiReply;

      const logMessage = `
üé¨ *–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –≤ sMeNa.Tv*

üí¨ *–í–æ–ø—Ä–æ—Å:* ${truncatedUserMsg}
ü§ñ *–û—Ç–≤–µ—Ç –ê–ª–∏—Å—ã:* ${truncatedAiReply}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}
      `;

      const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: logMessage,
          parse_mode: 'Markdown'
        })
      });

      if (!telegramResponse.ok) {
        console.error('Telegram API error:', await telegramResponse.text());
      }

    } catch (error) {
      console.error('Telegram log failed:', error);
    }
  }
}
